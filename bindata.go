// Code generated by go-bindata.
// sources:
// ui/build/index.css
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexCss = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x59\x4d\x8e\xe3\xb8\x15\x5e\xdb\xa7\x20\xd0\x30\xea\x67\x2c\x5b\x3f\x56\xb9\x4b\x85\x20\x99\x74\x3a\x98\x20\x33\xd9\x64\x91\x65\x86\x12\x9f\x24\xa6\x28\x51\x21\x29\xff\x54\xd0\xe7\xc8\x2a\x67\xc8\x21\x72\x93\x9c\x24\x20\xa9\x7f\xcb\xee\x1a\x60\x66\x97\x66\x97\x5d\xa2\x1e\x1f\x1f\xdf\xef\xf7\x58\xb9\x2a\xd8\x7a\x19\x73\x72\x46\xff\x58\x2e\x0a\x2c\x32\x5a\x46\xc8\x7d\x59\x2e\x2a\x4c\x08\x2d\x33\xf3\xf0\x65\xb9\x8c\x6b\xa5\x78\x79\x8b\x68\x11\x73\x41\x40\x34\xbf\xe3\xe4\x35\x13\xbc\x2e\x49\x84\x4a\x5e\xc2\xcb\x72\x91\xf2\x52\x39\x92\xbe\x41\x84\x3c\xd7\x5d\xbd\x2c\x17\x07\x10\x8a\x26\x98\x39\x98\xd1\xac\x8c\x50\x8c\x25\x30\xda\x13\xa7\xb8\xa0\xec\x1c\x21\x5a\xe6\x20\xa8\x6a\xa7\x8f\x40\xb3\x5c\x0d\xa7\x13\xce\xb8\x18\x4e\x38\x47\x88\x5f\xa9\x72\x70\x55\x01\x16\xb8\x4c\xa0\x13\x63\x66\xaa\xa5\xb6\x12\x16\x9c\xab\xdc\x1c\x0a\x97\x8a\x62\x46\xb1\x04\xa2\xa9\x0a\xfe\xe6\x70\x79\xba\x20\xcb\x04\x3e\xcb\x04\x33\xb0\x8a\x6a\x74\xa9\xa9\x22\xe4\xed\xaa\x13\xba\xfb\x0e\xd8\x01\xf4\x51\xd1\x9f\xa0\x86\xbb\x35\xea\x26\xd6\xe8\x5b\x41\x31\x5b\x23\x89\x4b\xe9\x48\x10\x34\x7d\x59\x2e\xb4\x12\x9c\xbc\x39\xa6\xb7\xd9\x41\x31\x51\xe9\x87\x34\xd4\xa3\x3f\xfa\x87\x1d\xd1\xe3\x65\xb9\x28\x68\xe9\x1c\x29\x51\x79\x84\xfc\xc0\xad\x4e\x7a\x0a\x9f\xda\xa9\x30\x6c\xa7\x1a\x23\x22\x5c\x2b\xfe\xb3\xea\x60\x6c\xa4\xc0\xb5\xfe\x13\xa5\x3c\xa9\xa5\x56\x0c\xaf\x95\x3e\x5f\xeb\x58\x9b\x9c\x12\x02\xc6\xb3\x08\x95\x15\xc3\xe7\xd6\x2e\xfa\xa5\xe2\x84\xe3\xaa\xd2\x6f\xc7\xe7\x4f\xd3\xc1\x29\x3c\x7d\x50\xe4\xa2\x9d\xf9\xd2\x7e\xc9\x25\x55\x94\x97\x11\x12\xc0\xb0\xa2\x07\x30\xfe\x79\x72\x64\x8e\x09\x3f\xea\x73\xfb\xd5\x09\xed\xcc\x2a\x91\xc5\xf8\xde\x5d\xa3\xe6\xff\xc6\x7f\x58\x2f\x17\x68\xf0\xcf\x45\x7e\x58\x9d\x50\xe8\xce\x92\x7b\x0f\x63\x51\x69\x59\xd5\x2a\x8a\x5a\x85\x9a\x47\xa7\x62\x38\x81\x9c\x33\x02\xa2\x75\x0e\x47\xaa\x33\x83\x08\x51\x85\x19\x4d\x66\xf5\xd6\x59\x17\x9e\xf4\x98\xdf\x47\x9b\xe4\x97\x63\xff\x8b\x89\x9f\x7b\x9a\x53\x6f\x28\x1c\x4b\xce\x6a\xa5\x0d\xa5\x78\x15\x21\xc7\x0b\x43\xe3\xaa\x8d\xe7\x36\x39\x63\x9c\x45\x0c\xc1\x68\x63\xcf\x6c\xac\xe0\xa4\xda\xac\x92\x40\xa9\x40\xf4\xd2\x18\xfb\x79\xfb\x70\x8d\x76\x7b\xfb\xe3\x6e\xbc\xf0\x61\x10\x03\x66\xb5\x80\x92\x80\x30\xce\xcd\x2b\x45\x0b\xfa\x06\xdf\x43\x46\x63\xca\xa8\x3a\xb7\xa1\xf0\x2e\xca\xf7\x10\x69\xcd\x94\x70\x74\xb4\x76\xd6\xcb\x0d\x10\xaa\xc6\xea\x19\xf8\xf1\x30\x01\x5f\x55\x8e\xbf\xeb\x75\xf3\xee\x3c\x3a\x9f\x77\x06\x69\xfd\x22\xd1\x76\x05\xe0\xc9\x6c\xd7\xd2\x7a\xd5\x09\x49\xce\x28\x41\x1f\x9e\x9f\x9f\x27\xb1\x47\x4b\x09\x0a\xb9\xc8\xd1\x54\xe1\x95\x10\x6c\xd7\xd0\x37\xc3\xde\x32\x76\x62\x7e\xfa\xb9\xf3\x75\xa7\x76\xa3\xef\xf6\x38\xde\x53\x75\x1a\x7c\x3c\xb9\xa3\xe3\x35\x75\x63\x98\x91\xa6\x27\x70\xdd\xe0\xe1\xda\xb9\x75\xea\xd1\x67\x6f\xd6\x98\xb1\x31\xf4\x5a\x9e\x02\xd3\xf2\xaa\xed\xdf\x1c\x5a\x12\x38\x45\xc8\xef\xc4\x71\x4c\xb8\x0c\x34\x3e\x8e\xb6\x2c\x63\xe0\x60\xc6\x34\xcb\xd6\x5b\xcc\x61\x3a\x3b\x5f\x1e\x0d\x6d\x1f\xd1\x0f\x3c\xa6\x0c\xd0\x9f\x71\x8a\x05\x45\x8f\xdb\xe5\x82\x57\x38\xa1\xea\x1c\x4d\x32\xec\x20\x70\x45\x17\x83\x2b\xc3\x52\x29\x5e\xb4\x8f\x13\x69\xbe\x41\x0c\xc7\x30\x94\xaa\xd1\x71\x2b\x56\x30\x70\x60\xeb\xd2\x57\xb7\xb5\xf9\x22\xf4\xcd\x02\x06\xa9\xd2\xd9\x23\xa8\x86\xae\xa2\x04\x2e\x65\xca\x45\x11\x21\xc1\x15\x56\x70\xff\xec\x12\xc8\xb4\x89\xae\xbf\x9a\x17\x39\x8a\x21\xe5\x02\xb4\xe4\x09\x2f\x15\xe8\x32\x7f\xf7\xdf\x7f\xfd\xfb\x6e\x12\x80\x56\x9c\x69\x0a\x1c\xb8\x98\x2e\x27\xfe\x5e\xfb\x42\xfb\xdb\x74\xcb\x28\xc9\x21\x79\x05\x32\xbb\xb5\xe5\xbb\x0f\xf4\xe8\x53\xab\xc3\xa8\x54\x37\x61\x9a\x26\x68\x93\xf7\xb8\xd0\xda\xb5\x8c\x5e\xf5\xbe\xcb\xfc\xd2\xc5\x65\x63\xea\x81\x17\x12\x3d\x2e\x99\x47\x0c\x4b\xe5\x24\x39\x65\xc4\x54\xf5\x31\x83\x79\x81\x4c\x3e\xa4\x65\x76\x75\xc1\x14\xad\xce\xaf\xee\xd2\x6a\x07\x34\x62\xc6\x93\xd7\x3e\x8d\x86\xae\x4d\x63\xbd\x8d\xfc\x26\x03\x8c\x20\x93\x1e\xbb\xa0\x37\xd7\xdc\x56\x07\x0a\xc7\x1b\x98\xa6\x53\x75\x63\x6d\x4d\x3a\x5b\xb4\x1a\xc9\x76\x36\x38\xb6\x8f\x06\xaf\xad\x91\xa4\x65\x02\x9a\xa7\xf3\x17\x88\xff\x48\x15\x8a\x05\x3f\x4a\x10\x12\x11\x0e\xb2\xbc\x53\x48\xd6\x55\xc5\x85\xb2\x75\x1c\x69\x7b\x6b\xb9\x74\x1c\xb7\x11\xd6\x20\xbf\xeb\x21\xe5\x0e\x82\xd8\x1d\x68\x40\x2f\x1c\x21\xfe\x1b\x49\xe3\x27\x21\xf1\x5b\xda\x19\x66\x9f\xab\x74\x83\xac\xb2\x7d\x5c\x2e\x16\xbf\xa7\x02\x52\x7e\x42\x02\xfe\x5e\x53\x01\x12\xfd\xf8\xe1\x47\xa4\x38\x8a\x01\x81\x4c\x70\x05\x04\x39\x28\x57\xaa\x92\xd1\x76\x1b\xd7\xd9\x1b\x65\x0c\x6f\x0a\x6e\xbf\xb9\xc8\xb6\x32\xe7\xc7\xbf\xc6\x75\xb6\x49\x32\xfa\x6b\x4a\x7e\xf5\xec\xfb\xbb\x20\x58\x2e\x16\x7f\xf8\x8c\x70\x49\xd0\x67\x92\x41\xcf\xfe\x11\x0e\x20\xce\xa6\xce\x3c\x4e\xf6\x51\x1c\x59\x0c\xb0\x46\x92\xa3\x23\x20\xc2\x91\xca\xb1\x36\x90\x54\x80\x09\xe2\x29\xfa\x5b\x2d\x15\x52\x39\x18\x31\x7b\xc1\x08\x1c\x80\xf1\x0a\xc4\xa6\xa0\x89\xe0\x92\xa7\x6a\x93\xf0\x62\x0b\xa5\x53\xcb\x6d\x37\xe7\x00\xc9\x60\x5b\x31\xac\x74\x36\xdb\x52\x29\x6b\x90\xdb\xbd\x17\xee\x77\xe1\xf3\x76\xb9\xd0\xe6\xe8\x4b\x96\x43\x0b\x9c\x41\x84\x6a\xc1\xee\xef\x08\x56\x38\x32\x13\x5b\x79\xc8\xbe\x39\x15\xec\xa5\x56\xe9\xc7\xf5\x2a\xf8\x24\x0f\xd9\xca\x77\x4f\x05\x2b\xe5\x2a\xf8\xdd\xca\xf7\xb5\x54\xab\xe0\xdb\xed\xf6\x78\x3c\x6e\x8e\x81\xd1\x92\xef\xba\xee\xd6\x50\xfa\x2b\xdf\x35\x3e\x6b\x89\x77\xae\x9d\xb2\x3e\x37\x9e\xd3\x21\xf2\x5b\x7e\xb2\x93\x8e\xe7\xae\x7c\xd7\xf1\x3e\xae\x7c\x57\x17\x0c\xdf\xf5\x82\x50\xd3\x05\x9f\x57\xc1\xa7\x84\x8a\x84\xc1\xca\x77\x93\x86\x3c\x6c\x78\x24\xe7\xf1\xb3\x18\x3f\xa6\x94\x31\x3b\xa3\x1d\xcc\xce\x49\x25\xf8\x2b\xd8\xd9\x95\x1f\xd8\x3c\x35\x7c\xe5\x0c\xe4\x0f\x56\xbe\xbf\xb5\x32\x98\xf3\x05\x9f\xef\x1e\x46\x95\xdf\x11\x50\x01\x56\xda\x83\x9b\x5f\xc7\xaf\xfb\xe8\xb2\x21\x8d\x74\x7d\xba\xee\xc1\xd3\x8c\x3f\x6e\x7c\xfe\x6f\x33\x6b\xb3\x98\x10\x4c\xc2\x77\xd8\xac\xc2\x2a\x1f\xb1\x5c\xf9\x41\x48\x12\x1f\xa7\x76\x31\xb1\xb3\x3f\xec\xf5\x83\x1f\x7e\xbf\xd3\xdf\x7b\x4f\x3f\xec\x57\xbe\x1b\x3e\x31\x67\xb7\xf2\x5d\xfd\xe3\xbb\xed\x47\xb0\x73\x42\xff\x6d\xd6\x31\x2e\xcc\xda\x83\x1c\x2e\x88\x13\x0b\xc0\xaf\x11\x32\x5f\xba\xbe\x8f\x4a\x8d\x46\xc2\xfd\x47\x83\x86\x2e\x2a\xd5\x04\xa2\xfb\x2d\x80\x69\x9d\x4c\xc3\x02\xe4\x6e\x76\x72\xa6\x38\x25\xbc\xa8\x18\x28\x20\xbd\x58\x2d\x8c\x20\xcf\x7a\xb4\xcd\x0a\x81\x84\x0b\x6c\x39\x9a\x0d\x55\x2e\x78\x9d\xe5\x73\x7e\x4b\x40\x5b\xe0\x3c\x53\xeb\xbe\x52\x59\x3a\xb0\xd8\x00\x89\xbe\xce\x8c\x6b\x5e\x7b\xd8\xdd\xf8\xe6\xa2\x2b\x42\x03\x50\xd2\xdc\x77\xb4\x87\x4a\x92\x67\xfc\x8c\xbb\x35\x3d\x4a\xb1\x90\x77\x4e\x6f\xbe\x44\x80\x25\x38\xbc\x9e\x0d\xd2\xe6\xb0\x51\xce\x0f\xb6\x13\x6e\xb7\xc2\x69\x18\x87\xb3\x15\xac\x5d\x82\x53\xd5\x2e\x69\x41\xe3\x7f\xfe\x79\x37\x83\x8f\x2c\xef\x59\xbd\x36\x4e\x70\xb9\xc9\x05\xb0\xb9\x8d\xa3\x26\x18\x6c\xa2\x1e\xc7\x6b\xa1\x4d\xca\xb9\x1a\x9f\x73\xbf\xdf\x5f\x60\x58\x2f\x1c\xd9\xc9\xb7\x46\x98\x45\x33\xef\xe8\x58\xec\x9e\xb3\x20\xfb\xee\x2b\x7d\xc7\x14\xaf\xd8\x56\xc0\x1d\xc8\xd6\xdc\x7e\x69\x0d\xa7\x4c\xf7\x64\xf6\xf2\xe9\xe2\x72\xc8\x1b\x77\x68\xb7\xae\x86\x3e\x9a\x06\xd6\x09\xaa\x13\xfa\x90\x3e\xe9\x71\x41\xf2\xdc\x70\x33\x44\xef\x60\x69\x5a\x4e\x17\x39\x4f\x37\x78\x7a\xba\x71\xd0\xe8\xd4\x50\xcd\xf5\xcf\x9d\xf1\x13\x5e\x97\xc6\x3b\x52\xc6\x75\xa5\xb2\x15\x68\x64\xa0\x49\x51\xb2\x2b\xb4\xff\x59\xcc\x3d\x7b\xa3\xb7\x49\x29\x53\x1a\x71\xfe\xb4\x66\xe3\xab\x16\xec\xac\x36\xdc\xc3\x36\x25\x9d\x7b\xd3\xd2\xde\x13\x4f\x48\xf0\xc0\x55\xfb\x3b\x8a\x56\xb8\x60\x8c\xed\xb5\x31\xf6\xbd\xab\x0e\x73\x5e\xdb\xdf\x5f\xdc\x66\x98\x94\x51\x61\x01\xa5\xea\xbd\x59\x60\x42\x6b\xd9\xf0\x9f\x4a\xd4\xa7\x8a\x86\xfa\xd6\x2d\xd4\xc3\xe5\xfa\x8d\x04\x06\x89\xce\xd9\xef\x62\xd1\x1a\x3e\x61\x80\x35\x61\x93\xf0\xd7\xcb\x5c\x15\x0c\x4d\xa7\x23\x9c\xe8\xce\x6e\xe0\x1b\xc6\x0e\xd7\x2e\x50\x47\xb5\x67\x18\xe6\x33\xba\x4b\x6a\x21\xb5\x90\x15\xa7\x36\xf6\x67\xa4\xea\x75\x73\xc1\xa5\xd6\x48\xb9\xb7\x31\x2d\x53\x3e\xf4\xb3\x27\x5d\x22\xbb\x0a\xd0\x26\xa7\x38\xd5\x63\x7a\x49\xd8\x8b\x39\x8e\xef\xe6\xd6\xc9\x0f\xc3\x35\xea\x3f\xdc\x8d\xb9\x0a\x9c\xcb\x5e\x9d\x20\xe6\x3a\x7a\x5c\x88\x07\x6f\xe7\x9d\xf0\x9a\x9e\x46\xa1\xb5\x6b\x43\xcb\x32\x7a\xb7\x7e\x74\xaf\xf3\x1d\x4e\x5e\x6d\x93\x51\xf0\x03\xa0\x1e\x34\xa2\x54\xf0\x62\xdc\x99\x6d\x96\x8b\x4f\x58\x37\x89\xb5\x04\x44\x15\xca\x18\x8f\x31\x63\xe7\xa6\xad\xa4\x0a\x35\xd5\x47\x22\x83\x47\x63\x7e\x02\x89\x68\x89\x9a\x7e\x6a\xf9\xb8\x5d\xfe\xa6\x00\x42\x31\x92\x89\x00\x28\x4d\x2b\x74\xdf\xf6\x7a\x05\x2d\x1d\x02\x07\x9a\x80\x53\xd1\x13\x30\xc7\x48\x1d\xb9\x0f\xfa\x28\x83\xeb\x8d\xb5\x79\x9a\x6f\xf7\xe6\xfe\x82\xf4\x65\x79\x6b\xc1\x04\x27\x7c\xd1\x8a\x69\x84\xbc\x1f\xfc\x05\x64\xa7\x41\x82\x95\xa4\x2f\x6f\xd3\x02\x61\x76\x1a\xe4\xb7\xc1\x5d\x56\xc7\xfc\x7f\x01\x00\x00\xff\xff\x55\x33\xf8\x6d\x3b\x1b\x00\x00")

func indexCssBytes() ([]byte, error) {
	return bindataRead(
		_indexCss,
		"index.css",
	)
}

func indexCss() (*asset, error) {
	bytes, err := indexCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.css", size: 6971, mode: os.FileMode(420), modTime: time.Unix(1537041469, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.css": indexCss,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"index.css": &bintree{indexCss, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

